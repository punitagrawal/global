From: Punit Agrawal <punitagrawal@gmail.com>
Date: Mon, 24 Mar 2014 15:06:54 +0000
Subject: Introduce htmake for global

---
 htmake/COPYING       |   8 ++
 htmake/Makefile      |  16 +++
 htmake/README.htmake |  41 ++++++
 htmake/htconfig.1    | 244 +++++++++++++++++++++++++++++++++
 htmake/htconfig.pl   | 381 +++++++++++++++++++++++++++++++++++++++++++++++++++
 htmake/htmake.1      | 109 +++++++++++++++
 htmake/htmake.pl     | 141 +++++++++++++++++++
 7 files changed, 940 insertions(+)
 create mode 100644 htmake/COPYING
 create mode 100644 htmake/Makefile
 create mode 100644 htmake/README.htmake
 create mode 100644 htmake/htconfig.1
 create mode 100644 htmake/htconfig.pl
 create mode 100644 htmake/htmake.1
 create mode 100644 htmake/htmake.pl

diff --git a/htmake/COPYING b/htmake/COPYING
new file mode 100644
index 0000000..076af5f
--- /dev/null
+++ b/htmake/COPYING
@@ -0,0 +1,8 @@
+htmake(1) and htconfig(1):
+
+	Copyright (c) 1999, 2000  Ron Lee. <ron@debian.org>
+	All rights reserved.
+
+These files may be distributed under the terms of the GNU GPL version 2 or later.
+
+
diff --git a/htmake/Makefile b/htmake/Makefile
new file mode 100644
index 0000000..002ed04
--- /dev/null
+++ b/htmake/Makefile
@@ -0,0 +1,16 @@
+PROG = htconfig htmake
+
+DESTDIR = /usr
+BINDIR = $(DESTDIR)/bin
+MANDIR = $(DESTDIR)/man
+
+all:
+install:
+	@for file in $(PROG); do\
+		cp $$file.pl $(BINDIR)/$$file;\
+		chmod 755 $(BINDIR)/$$file;\
+		cp $$file.1 $(MANDIR)/man1;\
+		chmod 644 $(MANDIR)/man1/$$file.1;\
+	done
+clean:
+
diff --git a/htmake/README.htmake b/htmake/README.htmake
new file mode 100644
index 0000000..1b41ea8
--- /dev/null
+++ b/htmake/README.htmake
@@ -0,0 +1,41 @@
+
+htmake(1) and htconfig(1) are used to implement a centralised cgi
+mechanism in conjunction with Shigio Yamaguchi's GLOBAL. See the
+relevant manual pages for a more comprehensive guide.
+
+to setup:
+	If you installed GLOBAL as a Debian binary package this
+	is already done.  See /etc/gtags/htmake.conf if you
+	wish to edit the defaults.
+
+	# make install
+	# htconfig -v -I -a http://hostname/cgi-bin/gsearch.cgi \
+		-p /var/gsearch/pathdata /yoursystems/cgi-bindir
+
+	where '-a url' is the url to your cgi-bin dir
+	'-p path' is wherever you choose to put the path data file
+	'/yoursystems/cgi-bindir' is wherever your cgi's usually go.
+
+example use (with default htags behaviour):
+	$ cd /somesource
+	$ gtags
+	$ htmake --verbose
+	$ lynx HTML/index.html	( should be immediately searchable.. )
+
+to create html files in public webspace:
+	$ cd /somesource
+	$ gtags
+	$ htmake --url=http://host/~user/prog/HTML /home/user/public_html/prog
+	$ lynx http://host/~user/prog/HTML
+
+The user that you run htmake as _must_ have write permission for the file
+/var/gsearch/pathdata -- since there are many ways to arrange this I have
+left it entirely up to the sysadmin to do - if you do htconfig -I to
+install files as root, then by default only root can write to this file.
+
+Comments, patches, praise, and blathering flames can
+be sent along with suggestions for improvement to
+Ron Lee <ron@debian.org>
+
+See the included file 'COPYING' or 'copyright' for licence information.
+
diff --git a/htmake/htconfig.1 b/htmake/htconfig.1
new file mode 100644
index 0000000..0e954ae
--- /dev/null
+++ b/htmake/htconfig.1
@@ -0,0 +1,244 @@
+.TH HTCONFIG 1 "27 March 1999" "Debian GNU/Linux" "GLOBAL cgi Utilities"
+.\" Copyright (c) 1999, 2000  Ron Lee.  All rights reserved.
+.\" This text may be distributed under the same terms as the htconfig source.
+.\" All copies of this manual must acknowledge the author and include the
+.\" above copyright statement.
+.\"
+.\" In cases of discrepancy the source is authorative.  Duh 8^}
+.SH NAME
+htconfig \- create/update GLOBAL gsearch.cgi files
+.SH SYNOPSIS
+.nh
+.B htconfig -I
+.RB [ -v ]
+.RB [ -z ]
+.RB [ -a
+.IR action ]
+.RB [ -p
+.IR pathdb ]
+.I cgidir
+.HP
+.B htconfig --install
+.RB [ --verbose ]
+.RB [ --makeghtml ]
+.RB [ --formaction=\fIcgi\fP ]
+.RB [ --pathdb=\fIpaths-file\fP ]
+.I cgidir
+.HP
+.B htconfig
+.RB [ -v ]
+.RB [ -u
+.IR url ]
+.RB [ -d
+.IR GTAGSDBPATH ]
+.RB [ -s
+.IR GTAGSROOT ]
+.RI [ htmldir ]
+.HP
+.B htconfig
+.RB [ --verbose ]
+.RB [ --url=\fIbase-url\fP ]
+.RB [ --tags=\fIGTAGSDBPATH\fP ]
+.RB [ --src=\fIGTAGSROOT\fP ]
+.RI [ htmldir ]
+.hy
+.SH "DESCRIPTION"
+.B htconfig
+is a program to create and maintain a centralised cgi interface
+for hypertext created with
+.nh
+Shigio Yamaguchi's
+.hy
+\fBGLOBAL\fP source
+code tag system.
+.PP
+.B htconfig
+is used to create the necessary scripts in your system's favoured
+cgi-bin directory, and to maintain the \fIpaths database\fP, which
+.B gsearch.cgi
+uses to locate your hypertext source and the associated TAGS files.
+This enables \fBGLOBAL\fP's hypertext search facilities without
+requiring you to enable cgi execution outside of a system-wide
+cgi-bin directory.
+.PP
+.B htconfig
+acts as a backend for the \fBhtmake\fP(1) script which automates the
+process of generating hypertext source with the relevant options
+to \fBhtags\fP(1) and adding required entries to the paths database.
+.B htconfig
+can also optionally create a centralised \fBghtml.cgi\fP script, for
+users of the \fBhtags -c\fP option which creates compressed hypertext
+with a .ghtml suffix.
+.SH OPTIONS
+.SS Common Options
+.TP
+.B -v, --verbose
+uh, you get one guess.
+.SS Install Options
+These options are to be used during the initial installation of
+the centralised cgi mechanism.
+If you installed this as a binary package you probably won't
+need to use these and can skip to the next section.
+Otherwise you \fImust\fP run
+.nh
+.B "htconfig --install"
+.hy
+with any or all of the following options \fIbefore\fP using
+\fBhtmake\fP(1) or any of the \fBDatabase Options\fP of
+\fBhtconfig\fP.
+.TP
+.B -I, --install
+Creates \fBgsearch.cgi\fP in \fIcgidir\fP and creates the config file
+.nh
+\fI/etc/gtags/htmake.conf\fP
+.hy
+if it doesn't already exist.  You \fImust\fP specify \fIcgidir\fP,
+there is no default.
+.TP
+.B -a action, --formaction=action
+Puts the default submit action for hypertext created with
+\fBhtmake\fP(1) into
+.nh
+\fI/etc/gtags/htmake.conf\fP
+.hy
+when that file is created.  You can edit \fIhtmake.conf\fP at any time
+to change it, or override its setting from the command line.
+Setting this to the absolute url of \fBgsearch.cgi\fP on your
+system is probably what you want here unless you understand why not.
+.br
+.nh
+eg.
+.B --formaction=http://host/cgi\-bin/gsearch.cgi
+.hy
+.TP
+.B -p paths-database, --pathdb=paths-database
+Puts the filesystem location of the \fIpaths database\fP file into
+.nh
+\fI/etc/gtags/htmake.conf\fP 
+.hy
+when that file is created.  You \fImust\fP define a location for
+the \fIpaths database\fP either with this option or by editing
+the \fBGSPATHDATA\fP option in \fIhtmake.conf\fP before using
+.nh
+\fBhtmake\fP(1)
+.hy
+or the Database options of \fBhtconfig\fP(1).
+.br
+Due to file system variations there is no default for this.
+For Debian GNU/Linux systems the preferred location is:
+.br
+.I /var/lib/gsearch/pathdata
+.br
+One suggestion for *BSD systems would be:
+.br
+.I /var/gsearch/pathdata
+.TP
+.B -z, --makeghtml
+Installs the ghtml.cgi script in \fIcgidir\fP.
+You will also need edit your http server config to make use of this.
+For \fBapache\fP this involves ensuring \fImod_mime\fP and \fImod_actions\fP
+are loaded and adding lines like:
+.br
+.B AddHandler htags-gzipped-html ghtml
+.br
+.B Action htags-gzipped-html \fI/cgi-bin/ghtml.cgi\fP
+.br
+to your \fIhttpd.conf\fP file.
+.SS Database Options
+These options are used to configure and maintain the \fBpath database\fP
+that allows gsearch.cgi to find your hypertext source and it's tag files.
+You should call \fBhtconfig\fP with these options when you move files or
+create a new hypertext source tree with \fBhtags\fP(1).
+The \fBpath database\fP requires the hypertext source to be generated
+with a \fIunique id\fP using the \fBhtags --id=someid\fP option.
+.PP
+When creating a \fInew\fP hypertext source tree you may prefer to use
+\fBhtmake\fP(1) which invokes \fBhtags\fP with the desired options and
+then calls \fBhtconfig\fP to update the \fBpath database\fP as a single
+operation.
+.TP
+.I htmldir
+specifies the filesystem path to the root of your hypertext source tree.
+It defaults to \fI./HTML\fP in line with \fBhtags\fP(1) defaults and is
+not required at all if the \fB--url\fP option is used \fIand\fP your system
+has \fBlynx\fP(1) availiable,
+.TP
+.B -u base-url, --url=base-url
+the base url of your hypertext source.
+For best results always use absolute url's here.
+.br
+eg. \fIhttp://host/~user/mysource\fP
+.br
+It defaults to \fIfile:/htmldir\fP
+.TP
+.B -d gtagsdbpath, --tags=gtagsdbpath
+the filesystem path to the \fBGTAGS\fP files associated with your source.
+It defaults to the current directory.
+.TP
+.B -s gtagsroot, --src=gtagsroot
+the filesystem path to the root of your original plaintext source tree.
+It defaults to the current directory.
+.SH EXAMPLES
+To initialise and install cgi and config files:
+.PP
+# htconfig -I -a http://host/cgi-bin/gsearch.cgi \\
+  -p /var/lib/gsearch/pathdata /usr/lib/cgi-bin
+.PP
+To generate hypertext and update \fBpath database\fP:
+.PP
+$ cd /usr/src/myprog
+.br
+$ gtags
+.br
+$ htags --action=http://host/cgi-bin/gsearch.cgi \\
+  --id=uniqueid --nocgi
+.br
+$ htconfig
+.PP
+or more simply:
+.PP
+$ cd /usr/src/myprog
+.br
+$ gtags
+.br
+$ htmake
+.PP
+To update the \fBpath database\fP if you relocate your hypertext, TAGS files,
+or the original program source:
+.PP
+$ htconfig -u new-url -d new-gtagsdbpath \\
+  -s new-gtagsdbroot newhtmldir
+.PP
+.RS
+some of these option may be inferred - See their defaults under
+.B Database Options
+.RE
+.PP
+The user running \fBhtconfig\fP or \fBhtmake\fP must have write permission for the
+.B path database.
+.SH FILES
+.I /etc/gtags/htmake.conf
+.br
+.I gsearch.cgi
+.br
+.I ghtml.cgi
+.br
+.I path database
+.SH BUGS
+.B htconfig
+currently has no automatic housekeeping mechanism for 'stale' database entries.
+This should be fixed RSN.
+.PP
+There is presently no file locking mechanism for database updates.
+Attempting simultaneous updates could prove 'surprising' ^_^
+.PP
+This is \fIalpha\fP software \- expect anything!
+.SH "SEE ALSO"
+.BR htmake (1), " htags" (1), " global" (1).
+.SH AUTHOR
+Ron Lee <ron@debian.org>
+.SH CREDITS
+Thanks to Shigio Yamaguchi <shigio@gnu.org> for creating
+\fBGLOBAL\fP and releasing it as free software.
+.br
+A truly cool productivity tool!
diff --git a/htmake/htconfig.pl b/htmake/htconfig.pl
new file mode 100644
index 0000000..1a45960
--- /dev/null
+++ b/htmake/htconfig.pl
@@ -0,0 +1,381 @@
+#!/usr/bin/perl
+#
+# Copyright (c) 1999, 2000
+#		Ron Lee <ron@debian.org> All rights reserved.
+#
+# You may distribute this software under the terms of the GNU GPL version 2
+# or later.
+#
+#	It is adapted from, and intended for use with, Shigio Yamaguchi's
+#	GLOBAL source code tagging and html generation suite.
+#
+#	htconfig.pl					13-Mar-99
+#
+#	This program is for manipulating the database read by gsearch.cgi,
+#	an extended version of the global.cgi script.  It allows for a
+#	single central script to search multiple hypertext source trees on
+#	your system.
+#
+#	usage:
+#	      htconfig -I [-z] [-a form-action] [-p pathdb] cgidir
+#	      htconfig --install [--makeghtml] [--formaction=cgi] [--pathdb=pathsfile] cgidir
+#
+#	      htconfig -u base-url -d gtagsdbpath -s gtagsroot [dir]
+#	      htconfig --url=base-url --tags=gtagsdbpath --src=gtagsroot [dir]
+#
+#	defaults: ( all are expanded to absolute paths )
+#		-u	file:/dir
+#		-d, -s	./
+#		[dir]	./HTML
+#
+#	operation:
+#		htconfig -I installs the cgi scripts and configuration
+#		file.  This file must contain the location of the database
+#		used to store path data created by htconfig and read by
+#		gsearch.cgi - the -p option can set this at creation time.
+#		-z installs ghtml.cgi as well as global.cgi.
+#
+#		otherwise htconfig appends an entry to the database file
+#		based on the paths supplied.
+#
+#	extra flags:	-v --verbose
+#
+$com = $0;
+$com =~ s/.*\///;
+$usage = "usage: $com -I [-v][-z][-a form-action][-p pathdb] cgi-dir\n";
+$usage .= "       $com --install [--makeghtml][--formaction=cgi-url][--pathdb=pathdatafile] cgi-dir\n\n";
+$usage .= "       $com [-v][-u base-url][-d gtagsdbpath][-s gtagsroot][htmldir]\n";
+$usage .= "       $com [--verbose][--url=base-url][--tags=gtagsdbpath][--src=gtagsroot][htmldir]\n";
+#-----------------------------------------------------------------
+# DEFAULTS
+#-----------------------------------------------------------------
+
+$CONFDIR = '/etc/gtags';
+$CONFIG = $CONFDIR .'/htmake.conf';
+chop($GHTML = `gtags --config gzipped_suffix`) if &usable('gtags');
+$GHTML = $GHTML || 'ghtml';
+$actiondir = $tags = $src = '.';
+
+#----------------------------------------------------------------
+# UTILITIES
+#----------------------------------------------------------------
+
+sub getcwd {
+	local($dir) = `/bin/pwd`;
+	chop($dir);
+	$dir;
+}
+sub realpath {
+	local($dir) = @_;
+	local($cwd) = &getcwd;
+	chdir($dir) || &error("directory '$dir' not found.");
+	$dir = &getcwd;
+	chdir($cwd) || &error("Cannot return to '$cwd'.");
+	$dir;
+}
+sub usable {
+	local($command) = @_;
+	foreach (split(/:/, $ENV{'PATH'})) {
+		return 1 if (-x "$_/$command");
+	}
+	return 0;
+}
+sub error {
+        print STDERR "$com: $_[0]\n\n";
+        exit 1;
+}
+sub usage {
+	print STDERR $usage;
+	exit 1;
+}
+
+#-----------------------------------------------------------------
+# MAIN
+#-----------------------------------------------------------------
+
+$id = $install = $makeghtml = $formaction = $pathdb = $url = $verbose = '';
+%longoption = (	install => 1,	makeghtml => 1,	pathdb => '',	formaction => '',
+		verbose => 1,	url => '',	tags => '.',	src => '.',
+);
+while ($ARGV[0] =~ /^-/) {
+	$opt = shift;
+	if ($opt =~ /^--(\w+)=?([-+.:~\/\w]*)/) {
+		&usage unless exists $longoption{$1};
+		$$1 = $2 || $longoption{$1};
+		next;
+	}
+	&usage if ($opt =~ /[^-Iadpsuvz]/);
+	if ($opt =~ /I/) { $install = 1; }
+	if ($opt =~ /v/) { $verbose = 1; }
+	if ($opt =~ /z/) { $makeghtml = 1; }
+	if ($opt =~ /a/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$formaction = $opt;
+	} elsif ($opt =~ /p/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$pathdb = $opt;
+	} elsif ($opt =~ /u/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$url = $opt;
+	} elsif ($opt =~ /d/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$tags = $opt;
+	} elsif ($opt =~ /s/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$src = $opt;
+	}
+}
+$actiondir = &realpath($ARGV[0]) if $ARGV[0];
+
+#-----------------------------------------------------------------
+# INSTALL
+#-----------------------------------------------------------------
+
+if ($install) {
+	&usage if ($actiondir eq '.');
+	-w $actiondir or &error("$actiondir is not writable.");
+	unless (-e $CONFIG) {
+		mkdir($CONFDIR, 0755) || &error("Cannot create dir $CONFDIR") unless (-d $CONFDIR);
+		local($gspathdata) = ($pathdb) ? "\n\$GSPATHDATA = '$pathdb';\n" : '';
+		local($action) = ($formaction) ? "\n\$ACTION = '$formaction';" : '';
+		&makeconfig($CONFIG,$gspathdata,$action) || &error("Cannot create $CONFIG");
+		chmod(0644,$CONFIG) || &error("Cannot chmod $CONFIG");
+		if ($verbose) {
+			print "** $CONFIG created\n";
+			print "   GSPATHDATA set to $pathdb\n" if $gspathdata;
+			print "   ACTION set to $formaction\n" if $action;
+		}
+	}
+	&makegsearch("$actiondir/gsearch.cgi") || &error("Cannot create $actiondir/gsearch.cgi");
+	chmod(0755,"$actiondir/gsearch.cgi") || &error("Cannot chmod $actiondir/gsearch.cgi");
+	if ($makeghtml) {
+		&makeghtml("$actiondir/ghtml.cgi") || &error("Cannot create $actiondir/ghtml.cgi");
+		chmod(0755,"$actiondir/ghtml.cgi") || &error("Cannot chmod $actiondir/ghtml.cgi");
+	}
+	if ($verbose) {
+		print "** gsearch.cgi installed in $actiondir.\n";
+		if ($makeghtml) {
+			print "** ghtml.cgi installed in $actiondir.\n";
+			print "  Your http server will need to be configured to use .ghtml files\n";
+			print "  For apache, ensure mod_mime and mod_actions are loaded, and add:\n";
+			print "        AddHandler htags-gzipped-html ghtml\n";
+			print "        Action htags-gzipped-html /cgi-bin/ghtml.cgi\n";
+			print "  to your httpd.conf or srm.conf files.\n";
+		}
+		do $CONFIG;
+		print "\n** You must set \$GSPATHDATA in $CONFIG before using htmake or htconfig.\n\n"
+			unless $GSPATHDATA;
+	}
+	exit 0;
+}
+
+#-----------------------------------------------------------------
+# UPDATE
+#-----------------------------------------------------------------
+
+-f $CONFIG and do $CONFIG or &error("Cannot read $CONFIG, see htconfig --install option first.");
+&error("GSPATHDATA must be defined in $CONFIG") unless $GSPATHDATA;
+$tags = &realpath($tags);
+-f "$tags/GTAGS" or &error("GTAGS file was not located at $tags");
+$src = &realpath($src);
+$actiondir .= '/HTML' if ($actiondir eq '.');
+$url =~ s/\/$//;
+$suffix = 'html';
+if ($url && &usable('lynx')) {
+	$page = `lynx -source $url/mains.html 2>&1`;
+	$id = $1 if ($page =~ /name='id'\svalue='(\w+)'>/);
+	$suffix = 'ghtml' if ($page =~ /ghtml/);
+	$suffix = 'html.gz' if ($page =~ /html\.gz/);
+} elsif (-e "$actiondir/mains.html") {
+	$url = 'file:' . &realpath($actiondir) unless $url;
+	open(FH,"<$actiondir/mains.html") or &error("Cannot open $actiondir/mains.html");
+	while(<FH>) {
+		$id = $1 if /name='id'\svalue='(\w+)'>/;
+		$suffix = 'ghtml' if /ghtml/;
+		$suffix = 'html.gz' if /html\.gz/;
+	}
+	close FH;
+} else {
+	&error("Unable to find/parse mains.html for uniqueid");
+}
+&error("Could not obtain uniqueid value.\n$url is not searchable unless generated with one.") unless $id;
+unless (-f $GSPATHDATA) {
+	$GSPATHDATA =~ s/[^-+~.\/\w]//g;
+	chop($gspathdir = `dirname $GSPATHDATA`);
+	system('mkdir','-p','-m','0755',"$gspathdir") == 0 or &error("Cannot create $gspathdir")
+		unless (-d $gspathdir);
+	system('touch',"$GSPATHDATA") == 0 or &error("Cannot create $GSPATHDATA");
+	chmod(0644,"$GSPATHDATA") || &error("Cannot chmod $GSPATHDATA");
+}
+-w $GSPATHDATA or &error("Unable to update config, you do not have write permission for\n$GSPATHDATA");
+$newrecord = <<END_RECORD;
+if (\$form{'id'} eq '$id') {
+	\$hpath='$url';
+	\$srcpath='$src';
+	\$dbpath='$tags';
+	\$suffix='$suffix';
+}
+END_RECORD
+if (open(RD, "<$GSPATHDATA")) {
+	local ($/) = "}\n";
+	open(WR, ">$GSPATHDATA~") or &error("Cannot open $GSPATHDATA~");
+	while(<RD>) {
+		if(/eq\s'$id'/o) {
+			print WR $newrecord;
+			$done=1;
+		} elsif (!/^1;\n/) {
+			print WR;
+		}
+	}
+	print WR $newrecord unless $done;
+	print WR "1;\n";
+	close WR;
+	close RD;
+	rename ($GSPATHDATA, "$GSPATHDATA.bak") and rename ("$GSPATHDATA~", $GSPATHDATA)
+		or &error("Could not replace $GSPATHDATA");
+} else {
+	&error("Cannot read $GSPATHDATA");
+}
+if ($verbose) {
+	print "Path record " . (($done) ? "updated" : "created") . ".\n";
+	print "  id          = $id\n";
+	print "  url         = $url\n";	
+	print "  source path = $src\n";
+	print "  GTAGS path  = $tags\n";
+	print "  html suffix = $suffix\n\n";
+}
+
+exit 0;
+
+#----------------------------------------------------------------
+# GENERATE SCRIPTS
+#----------------------------------------------------------------
+
+sub makeconfig {
+	local ($file,$gspathdata,$action) = @_;
+	open(CFG, ">$file") || &error("Cannot open $file.");
+	$cfg = <<END_CONFIG;
+# Configuration file for the htmake and htconfig extensions
+# to GLOBAL.  Edit this file to suit your preferences.
+#
+# GSPATHDATA *must* be set or htconfig and gsearch.cgi cannot function.
+# There is no default.
+
+# For Debian GNU/Linux systems I would recommend:
+# \$GSPATHDATA = '/var/lib/gsearch/pathdata';
+
+# For *BSD systems you might prefer:
+# \$GSPATHDATA = '/var/gsearch/pathdata';
+$gspathdata
+# ACTION sets the url that form data is sent to when searching GLOBAL
+# hypertext.  You can override this at any time from the commandline
+# or set your preferred default here.
+#
+# \$ACTION = 'http://localhost/cgi-bin/gsearch.cgi';
+$action
+
+# return true
+1;
+END_CONFIG
+
+	print CFG $cfg;
+	close CFG;
+}
+sub makegsearch {
+	local($file) = @_;
+	open(PROGRAM, ">$file") || &error("cannot make gsearch.cgi.");
+	$program = "#!/usr/bin/perl\n\$CONFILE = '$CONFIG';\n";
+	$program .= <<'END_OF_SCRIPT';
+print "Content-type: text/html\n\n";
+print "<HTML><BODY>";
+@pairs = split (/&/, $ENV{'QUERY_STRING'});
+foreach $p (@pairs) {
+	($name, $value) = split(/=/, $p);
+	$value =~ tr/+/ /;
+	$value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack("C", hex($1))/eg;
+	$form{$name} = $value;
+}
+if (!defined($form{'id'})) {
+	print "<H3>No form id.  Please regenerate hypertext with htmake.</H3>\n";
+	&finish();
+}
+-f "$CONFILE" and do "$CONFILE" or &alertmissing($CONFILE);
+&alertmissing('db') unless (defined($GSPATHDATA));
+-f "$GSPATHDATA" and do "$GSPATHDATA" or &alertmissing($GSPATHDATA);
+&alertmissing('id') unless (defined($hpath));
+# call sanity/security checks here before executing global/setting ENV
+$ENV{'GTAGSROOT'} = $srcpath;
+$ENV{'GTAGSDBPATH'} = $dbpath;
+if ($form{'pattern'} eq '') {
+	print "<H3>Pattern not specified. <A HREF=$hpath/mains.html>[return]</A></H3>\n";
+	&finish();
+}
+$pattern = $form{'pattern'};
+$flag = ($form{'type'} eq 'definition') ? '' : 'r';
+$words = ($form{'type'} eq 'definition') ? 'definitions' : 'references';
+print "<H1><FONT COLOR=#cc0000>\"$pattern\"</FONT></H1>\n";
+print "Following $words are matched to above pattern.<HR>\n";
+$pattern =~ s/'//g;			# to shut security hole
+chdir("$srcpath");
+unless (open(PIPE, "/usr/bin/global -x$flag '$pattern' |")) {
+	print "<H3>Cannot execute global. <A HREF=$hpath/mains.html>[return]</A></H3>\n";
+	&finish();
+}
+$cnt = 0;
+print "<PRE>\n";
+while (<PIPE>) {
+	$cnt++;
+	($tag, $lno, $filename) = split;
+	chop($fileno = `/usr/bin/btreeop -K "./$filename" GPATH`);
+	s/($tag)/<A HREF=$hpath\/S\/$fileno.$suffix#$lno>$1<\/A>/;
+	print;
+}
+close(PIPE);
+print "</PRE>\n";
+if ($cnt == 0) {
+	print "<H3>Pattern not found. <A HREF=$hpath/mains.html>[return]</A></H3>\n";
+}
+&finish();
+
+sub alertmissing {
+	if (@_ eq 'id') {
+		print "<H3> No path data configured for this hypertext source</H3>\n";
+		print " Please run htconfig on it to enable this search form<br>\n";
+	} elsif (@_ eq 'db') {
+		print "<H3> Path database location not defined.</H3>\n";
+		print " Please set GSPATHDATA in $CONFILE<br>\n";
+	} else {
+		print "<H2> Unable to read @_</H2>\n";
+		print "<p> Please ensure this file exists, and is readable by<br>\n";
+		print " the user or group that your cgi scripts run as.\n";
+		print "<p> UID: $< or GID: $(\n";
+	}
+	&finish();
+}
+sub finish {
+	print "</BODY></HTML>\n";
+	exit 0;
+}
+END_OF_SCRIPT
+
+	print PROGRAM $program;
+	close(PROGRAM);
+}
+sub makeghtml {
+	local($file) = @_;
+	open(PROGRAM, ">$file") || &error("cannot make unzip script.");
+	$program = <<END_OF_SCRIPT;
+#!/bin/sh
+echo "content-type: text/html"
+echo
+gzip -S $GHTML -d -c "\$PATH_TRANSLATED"
+END_OF_SCRIPT
+
+	print PROGRAM $program;
+	close(PROGRAM);
+}
diff --git a/htmake/htmake.1 b/htmake/htmake.1
new file mode 100644
index 0000000..a723b36
--- /dev/null
+++ b/htmake/htmake.1
@@ -0,0 +1,109 @@
+.TH HTMAKE 1 "27 March 1999" "Debian GNU/Linux" "GLOBAL cgi Utilities"
+.\" Copyright (c) 1999, 2000  Ron Lee.  All rights reserved.
+.\" This text may be distributed under the same terms as the htmake source.
+.\" All copies of this manual must acknowledge the author and include the
+.\" above copyright statement.
+.\"
+.\" In cases of discrepancy the source is authorative.  Duh 8^}
+.SH NAME
+htmake \- create GLOBAL hypertext source searchable by gsearch.cgi
+.SH SYNOPSIS
+.BR htmake " [" "htags options" "] [" --url=base-url ]
+.RI [ destdir ]
+.SH "DESCRIPTION"
+.B htmake
+is a wrapper script that creates searchable hypertext from program 
+source code and records information into a \fBpath database\fP
+needed for a centralised search mechanism.
+.PP
+Prior to using this command you must have installed gsearch.cgi
+using the \fBhtconfig -I\fP option and configured the location
+of the \fBpath database\fP in \fIhtmake.conf\fP
+.PP
+Before you can create the hypertext source you need to execute
+\fBgtags\fP(1) from the root directory of the source tree.
+\fBhtmake\fP is then called from the same place.
+.PP
+\fBhtmake\fP uses \fBhtags\fP(1) to create the hypertext with a
+unique id and \fBhtconfig\fP(1) to make the required entries in
+the \fBpath database\fP.
+.SH OPTIONS
+The following options will be passed to \fBhtags\fP(1) if used.
+.TP
+.B -a
+Make an alphabetical function index.
+.TP
+.B -c
+Compress html. Use gzip(1) with .ghtml suffix.
+.TP
+.B -C
+Compress html. Use gzip(1) with .html.gz suffix.
+.TP
+.B -d \fItagdir\fP, --tags=gtagsdbpath
+Specifies the directory in which GTAGS and GRTAGS exist. The default is the current directory.
+.TP
+.B -F
+Use frames for definition index, file index and main view.
+.TP
+.B -l
+Make a name tag for each line of hypertext created.
+.TP
+.B -n
+Print out the line numbers.
+.TP
+.B -t title
+The title of this hypertext. Defaults to the last component of the current path.
+.TP
+.B --action=cgi-url
+Specify the location search queries are submitted to.
+Defaults to the value set in \fBhtmake.conf\fP or to
+.br
+.I http://localhost/cgi-bin/gsearch.cgi
+.PP
+The remaining options are more general or are passed to \fBhtconfig\fP(1).
+.TP
+.B --url=base-url
+the base url for your new hypertext source.
+For best results always use absolute url's here.
+.br
+eg. \fIhttp://host/~user/mysource\fP
+.br
+It defaults to \fIfile:/destdir\fP
+.TP
+.I destdir
+The directory in which hypertext is generated.
+The default is \fI./HTML\fP
+.TP
+.B -v, --verbose
+Activate the inbuilt screen saver. Give your phosphors a workout.
+.SH EXAMPLES
+$ cd /usr/src/myprog
+.br
+$ gtags
+.br
+$ htmake
+.PP
+$ cd /usr/src/myprog
+.br
+$ gtags -c
+.br
+$ htmake \-c \-\-url=http://host/~user/prog/HTML \\
+  /home/user/public_html/prog
+.SH FILES
+.I /etc/gtags/htmake.conf
+.br
+.I path database
+.SH BUGS
+As a wrapper \fBhtmake\fP gets to inherit bugs from other software too.
+Isn't life fun.
+.PP
+This is \fIalpha\fP software \- expect anything!
+.SH "SEE ALSO"
+.BR htconfig (1), " htags" (1), " gtags" (1), " global" (1).
+.SH AUTHOR
+Ron Lee <ron@debian.org>
+.SH CREDITS
+Thanks to Shigio Yamaguchi <shigio@gnu.org> for creating
+\fBGLOBAL\fP and releasing it as free software.
+.br
+A truly cool productivity tool!
diff --git a/htmake/htmake.pl b/htmake/htmake.pl
new file mode 100644
index 0000000..539f861
--- /dev/null
+++ b/htmake/htmake.pl
@@ -0,0 +1,141 @@
+#!/usr/bin/perl
+#
+# Copyright (c) 1999, 2000
+#		Ron Lee <ron@debian.org> All rights reserved.
+#
+#  You may distribute this software under the terms of the GNU GPL version 2
+#  or later.
+#
+#	htmake.pl					25-Mar-99
+#
+#	htmake is a wrapper that calls htags(1) with an --id attribute
+#	and runs htconfig on the generated hypertext.
+#
+# OPERATION:	generate unique id.
+#		call htags to make html source
+#		call htconfig to update database.
+#		must be called from src dir.
+#
+#	htmake [htags options] --action=cgi-action --url=base-url --tags=gtagsdbpath [destdir]
+#
+#	TODO: add --rebuild option, to recycle old id. ??
+#
+
+$com = $0;
+$com =~ s/.*\///;
+$usage = "usage: $com [-a][-c|-C][-h][-l][-n][-v][-d tagdir, --tags=tagdir][-t title]\n";
+$usage .= "         [--action=cgi-url][--url=base-url][destdir]\n";
+
+#-----------------------------------------------------------------
+# DEFAULTS
+#-----------------------------------------------------------------
+
+$CONFIG = '/etc/gtags/htmake.conf';
+$action = 'http://localhost/cgi-bin/gsearch.cgi';
+
+#----------------------------------------------------------------
+# UTILITIES
+#----------------------------------------------------------------
+
+sub getcwd {
+	local($dir) = `/bin/pwd`;
+	chop($dir);
+	$dir;
+}
+sub realpath {
+	local($dir) = @_;
+	local($cwd) = &getcwd;
+	chdir($dir) || &error("directory '$dir' not found.");
+	$dir = &getcwd;
+	chdir($cwd) || &error("Cannot return to '$cwd'.");
+	$dir;
+}
+sub usable {
+	local($command) = @_;
+	foreach (split(/:/, $ENV{'PATH'})) {
+		return 1 if (-x "$_/$command");
+	}
+	return 0;
+}
+sub error {
+	print STDERR "$com: $_[0]\n\n";
+	exit 1;
+}
+sub usage {
+	print STDERR $usage;
+	exit 1;
+}
+
+#-----------------------------------------------------------------
+# MAIN
+#-----------------------------------------------------------------
+
+&usable('htags') or &error("htags function not availiable.");
+&usable('htconfig') or &error("htconfig function not availiable.");
+-f $CONFIG and do $CONFIG or &error("Cannot read $CONFIG, see htconfig --install option first.");
+&error("GSPATHDATA must be defined in $CONFIG") unless $GSPATHDATA;
+$action = $ACTION if $ACTION;
+$destdir = $url = $tags = '';
+$htagsflags = 'f';
+%longoption = (	action => '/cgi-bin/gsearch.cgi', url => '', tags => '', verbose => 1, );
+while ($ARGV[0] =~ /^-/) {
+	$opt = shift;
+	if ($opt =~ /^--(\w+)=?([-+.:~\/\w]*)/) {
+		&usage unless exists $longoption{$1};
+		$$1 = $2 || $longoption{$1};
+		next;
+	}
+	&usage if ($opt =~ /[^-acCdFlntv]/);
+	if ($opt =~ /a/) { $htagsflags .= 'a'; }
+	if ($opt =~ /c/) { $htagsflags .= 'c'; }
+	if ($opt =~ /C/) { $htagsflags .= 'C'; }
+	if ($opt =~ /F/) { $htagsflags .= 'F'; }
+	if ($opt =~ /l/) { $htagsflags .= 'l'; }
+	if ($opt =~ /n/) { $htagsflags .= 'n'; }
+	if ($opt =~ /v/) { $verbose = 1; }
+	if ($opt =~ /d/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$tags = $opt;
+	} elsif ($opt =~ /t/) {
+		$opt = shift;
+		last if ($opt eq '');
+		$title = $opt;
+	}
+}
+$destdir = &realpath($ARGV[0]) if $ARGV[0];
+
+# get unique id
+#
+&getcwd =~ /([^\/]*)$/ and $id = $1;
+$id =~ s/[^\w]//g;
+$id .= time;
+
+# call htags
+#
+$htagsflags .= 'v' if $verbose;
+@htagsopt = ("-$htagsflags");
+push @htagsopt,('-t',"$title") if $title;
+push @htagsopt,('-d',"$tags") if $tags;
+print "Executing: htags @htagsopt --action=$action --id=$id --nocgi $destdir\n" if $verbose;
+
+# htags is a C program now, so the number of arguments is important.
+#
+if ($destdir eq '') {
+	system('htags',@htagsopt,"--action=$action","--id=$id","--nocgi") == 0 or
+		&error("Failed to execute htags.");
+} else {
+	system('htags',@htagsopt,"--action=$action","--id=$id","--nocgi","$destdir") == 0 or
+		&error("Failed to execute htags.");
+}
+
+# call htconfig
+#
+@htconfigopt =();
+push @htconfigopt,('-v') if $verbose;
+push @htconfigopt,("--url=$url") if $url;
+push @htconfigopt,("--tags=$tags") if $tags;
+print "Executing: htconfig @htconfigopt $destdir\n" if $verbose;
+system('htconfig',@htconfigopt,"$destdir") == 0 or &error("Failed to execute htconfig.");
+
+exit 0;

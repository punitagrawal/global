@HEADER GTAGS-CSCOPE,1,March 2011,GNU Project
@NAME   gtags-cscope - interactively examine a C program.
@SYNOPSIS
	@name{gtags-cscope} [-bCdehLlVv][-F file ][-012345678 @arg{pattern}][-p n]
@DESCRIPTION
	@name{gtags-cscope} is an interactive, screen-oriented tool that allows the user to
	browse through C source files for specified elements of code.

	@name{gtags-cscope} builds the symbol cross-reference the first time it is used on
	the source files for the program being browsed. On a subsequent invocation, 
	@name{gtags-cscope} rebuilds the cross-reference only if a source file
	has changed or the list of source files is different. When the
	cross-reference is rebuilt, it is updated incrementally, which makes rebuilding faster
	than the initial build.
@OPTIONS
	Some command line arguments can only occur as the only argument in
	the execution of @name{gtags-cscope}.  They cause the program to just print out
	some output and exit immediately:

	@begin_itemize
	@item{@option{-h}}
		View the long usage help display.
	@item{@option{-V}}
		Print the version number of @name{gtags-cscope}.
	@item{@option{--help}}
		Same as @option{-h}
	@item{@option{--version}}
		Same as @option{-V}
	@end_itemize

	The following options can appear in any combination:

	@begin_itemize
	@item{@option{-a}}
		Print absolute path names.
	@item{@option{-b}}
		Build the cross-reference only.
	@item{@option{-C}}
		Ignore letter case when searching.
	@item{@option{-d}}
		Do not update the cross-reference.
	@item{@option{-e}}
		Suppress the @kbd{^e} command prompt between files.
	@item{@option{-F} @arg{file}}
		Read symbol reference lines from @arg{file}. 
		(A symbol reference file is created by > and >>,
		and can also be read using the < command,
		described under ``Issuing Subsequent Requests'', below.)
	@item{@option{-i}}
		Ignore SIGINT signal in line-oriented mode.
	@item{@option{-L}}
		Do a single search with line-oriented output when used with the
		-num pattern option.
	@item{@option{-l}}
		Line-oriented interface.
		This option implies the @option{-d} option.
	@item{@option{-[0-9]} @arg{pattern}}
		Go to input field @arg{num} (counting from 0) and find @arg{pattern}.
	@item{@option{-p} @arg{n}}
		Display the last @arg{n} file path components instead of
		the default (1). Use @val{0} to not display the file name at all.
	@item{@option{-v}}
		Be more verbose in line-oriented mode.
	@end_itemize
@Requesting the initial search
	After the cross-reference is ready, @name{gtags-cscope} will display this menu:

	@begin_verbatim
	Find this C symbol:
	Find this function definition:
	Find functions called by this function (N/A):
	Find functions calling this function:
	Find this text string:
	Change this text string:
	Find this egrep pattern:
	Find this file:
	Find files #including this file:
	@end_verbatim

	Press the <Up> or <Down> keys repeatedly to move to the desired input
	field, type the text to search for, and then press the <Return> key.
@Issuing subsequent requests
	If the search is successful, any of these single-character commands
	can be used:

	@begin_itemize
	@item{0-9a-zA-Z}
		Edit the file referenced by the given line number.
	@item{<Space>}
		Display next set of matching lines.
	@item{<Tab>}
		Alternate between the menu and the list of matching lines
	@item{<Up>}
		Move to the previous menu item (if the cursor is in the menu)
		or move to the previous matching line (if the cursor is in the
		matching line list).
	@item{<Down>}
		Move to the next menu item (if the cursor is in the menu)
		or move to the next matching line (if the cursor is in the
		matching line list).
	@item{+}
		Display next set of matching lines.
	@item{-}
		Display previous set of matching lines.
	@item{^e}
		Edit displayed files in order.
	@item{>}
		Write the displayed list of lines to a file.
	@item{>>}
		Append the displayed list of lines to a file.
	@item{<}
		Read lines from a file that is in symbol reference format
		(created by @kbd{>} or @kbd{>>}), just like the @option{-F} option.
	@item{^}
		Filter all lines through a shell command and display the
		resulting lines, replacing the lines that were already there.
	@item{|}
		Pipe all lines to a shell command and display them without
		changing them.
	@item{^g}
		Read lines from the result of the execution of @xref{global,1}.
	@end_itemize

	At any time these single-character commands can also be used:
	@begin_itemize
	@item{<Return>}
		Move to next input field.
	@item{^n}
		Move to next input field.
	@item{^p}
		Move to previous input field.
	@item{^y}
		Search with the last text typed.
	@item{^b}
		Move to previous input field and search pattern.
	@item{^f}
		Move to next input field and search pattern.
	@item{^c}
		Toggle ignore/use letter case when searching. (When ignoring
		letter case, a search for @samp{FILE} will match @samp{File}
		and @samp{file}.)
	@item{^r}
		Rebuild the cross-reference.
	@item{!}
		Start an interactive shell (type @kbd{^d} to return to @name{gtags-cscope}).
	@item{^l}
		Redraw the screen.
	@item{?}
		Give help information about @name{gtags-cscope} commands.
	@item{^d}
		Exit @name{gtags-cscope}.
	@end_itemize

	NOTE: If the first character of the text to be searched for matches
	one of the above commands, escape it by typing a @kbd{\} (backslash) first.

	Substituting new text for old text

	After the text to be changed has been typed, @name{gtags-cscope} will prompt for
	the new text, and then it will display the lines containing the old
	text. Select the lines to be changed with these single-character
	commands:
	@begin_itemize
	@item{0-9a-zA-Z}
		Mark or unmark the line to be changed.
	@item{*}
		Mark or unmark all displayed lines to be changed.
	@item{<Space>}
		Display next set of lines.
	@item{+}
		Display next set of lines.
	@item{-}
		Display previous set of lines.
	@item{^a}
		Mark or unmark all lines to be changed.
	@item{^d}
		Change the marked lines and exit.
	@item{<Esc>}
		Exit without changing the marked lines.
	@item{!}
		Start an interactive shell (type @kbd{^d} to return to @name{gtags-cscope}).
	@item{^l}
		Redraw the screen.
	@item{?}
		Give help information about @name{gtags-cscope} commands.
	@item{Special keys}
		If your terminal has arrow keys that work in @name{vi}, you can use them
		to move around the input fields. The up-arrow key is useful to move to
		the previous
		input field instead of using the <Tab> key repeatedly. If you have
		<CLEAR>, <NEXT>, or <PREV> keys they will act as the @kbd{^l}, @kbd{+},
		and @kbd{-} commands, respectively.
	@end_itemize
@Line-Oriented interface
	The @option{-l} option lets you use @name{gtags-cscope}
	where a screen-oriented interface
	would not be useful, for example, from another screen-oriented program.

	@name{gtags-cscope} will prompt with @samp{>>} when it is ready
	for an input line, which starts
	with the field number (counting from 0), immediately followed by the
	search pattern. For example, @samp{1main} finds the definition of the
	@samp{main} function.

	If you just want a single search, instead of the @option{-l} option use
	the @option{-L} and @option{-num @arg{pattern}} options,
	and you won't get the @samp{>>} prompt.

	For @option{-l}, @name{gtags-cscope} outputs the number of reference lines:@br
        cscope: 2 lines

	For each reference found, @name{gtags-cscope} outputs a line consisting of the file
	name, function name, line number, and line text, separated by spaces.
	For example:@br
	main.c main 161 main(argc, argv)

        Note that the editor is not called to display a single reference,
        unlike the screen-oriented interface.

	You can use the @kbd{c} command to toggle ignore/use letter case when
	searching. (When ignoring letter case, a search for @samp{FILE} will
	match @samp{File} and @samp{file}.)

	You can use the @kbd{r} command to rebuild the database.

	@name{gtags-cscope} will quit when it detects end-of-file, or when the first
	character of an input line is @kbd{^d} or @kbd{q}.
@ENVIRONMENT VARIABLES
	The following environment variables are of @name{cscope} origin.

	@begin_itemize
	@item{@var{CSCOPE_EDITOR}}
		Overrides the @var{EDITOR} and @var{VIEWER} variables.
		Use this if you wish to use a different editor with @name{cscope}
		than that specified by your @var{EDITOR}/@var{VIEWER} variables.
	@item{@var{CSCOPE_LINEFLAG}}
		Format of the line number flag for your editor.
		By default, @name{cscope} invokes your editor via the equivalent of
		@samp{editor +@arg{N} @arg{file}}, where @arg{N} is the line number
		that the editor should jump to.
		This format is used by both @name{emacs} and @name{vi}.
		If your editor needs something different, specify it in this variable,
		with @samp{%s} as a placeholder for the line number.
		Eg: if your editor needs to be invoked as @samp{editor -#103 @arg{file}}
		to go to line 103, set this variable to @samp{-#%s}.
	@item{@var{CSCOPE_LINEFLAG_AFTER_FILE}}
		Set this variable to @val{yes} if your editor needs to be invoked with
		the line number option after the filename to be edited. To continue
		the example from @var{CSCOPE_LINEFLAG}, above: if your editor needs to see
		@samp{editor @arg{file} -#@arg{number}}, set this environment variable.
		Users of most standard editors (@name{vi}, @name{emacs}) do not need
		to set this variable.
	@item{@var{EDITOR}}
		Preferred editor, which defaults to @name{vi}.
	@item{@var{HOME}}
		Home directory, which is automatically set at login.
	@item{@var{SHELL}}
		Preferred shell, which defaults to @name{sh}.
	@item{@var{TERM}}
		Terminal type, which must be a screen terminal.
	@item{@var{TERMINFO}}
		Terminal information directory full path name. If your terminal
		is not in the standard terminfo directory, see @name{curses}
		and @name{terminfo} for how to make your own terminal description.
	@item{@var{TMPDIR}}
		Temporary file directory, which defaults to @file{/tmp}.
	@item{@var{VIEWER}}
		Preferred file display program (such as @name{less}), which overrides
		@var{EDITOR} (see above).
	@end_itemize

	The following environment variables are of @name{GLOBAL} origin.

	@begin_itemize
	@item{@var{GTAGSCONF}}
		Configuration file. The default is @file{$HOME/.globalrc}.
	@item{@var{GTAGSGLOBAL}}
		If this variable is set, @file{$GTAGSGLOBAL} is used as the name
                of @xref{global,1}. The default is @name{global}.
	@item{@var{GTAGSGTAGS}}
		If this variable is set, @file{$GTAGSGTAGS} is used as the name
                of @xref{gtags,1}. The default is @name{gtags}.
	@item{@var{GTAGSDBPATH}}
		The directory in which the tag files exist.
		This value is ignored when @var{GTAGSROOT} is not defined.
	@item{@var{GTAGSLABEL}}
		Configuration label. The default is @val{default}.
	@item{@var{GTAGSLIBPATH}}
		If this variable is set, it is used as the path to search
		for library functions. If the specified tags is not
		found in the project, @name{global} also searches in these paths.
		Since only @file{GTAGS} is targeted in the retrieval, this variable is
		ignored when @option{-r} or @option{-s} is specified.
	@item{@var{GTAGSROOT}}
		The root directory of the project.
	@item{@var{MAKEOBJDIR}}
		If this variable is set, @file{$MAKEOBJDIR} is used as the name
		of BSD-style objdir. The default is @file{obj}.
	@item{@var{MAKEOBJDIRPREFIX}}
		If this variable is set, @file{$MAKEOBJDIRPREFIX} is used as the prefix
		of BSD-style objdir. The default is @file{/usr/obj}.
	@end_itemize
@FILES
	@begin_itemize
	@item{@file{GTAGS}}
		Tag file for definitions.
	@item{@file{GRTAGS}}
		Tag file for references.
	@item{@file{GPATH}}
		Tag file for source files.
	@item{@file{GTAGSROOT}}
		If environment variable @var{GTAGSROOT} is not set
		and file @file{GTAGSROOT} exists in the same directory as @file{GTAGS}
		then @name{global} sets @var{GTAGSROOT} to the contents of the file.
	@item{@file{$HOME/.globalrc}, @file{/etc/gtags.conf}, @file{[sysconfdir]/gtags.conf}}
		Configuration files.
	@end_itemize
@SEE ALSO
	@xref{gtags,1},
	@xref{global,1},
	@xref{htags,1}.

	GNU GLOBAL source code tag system@br
	(http://www.gnu.org/software/global/).
@BUG
	The function field of the display is almost <unknown> since
	@name{GLOBAL} doesn't recognize it.

	'Find functions called by this function' is not implemented.
@AUTHOR
	Joe Steffen (original author) and others.
@HISTORY
	@name{Cscope} was originally developed at Bell Labs in the early 1980s,
	and was released as free software under the BSD license in April 2000.
	@name{Gtags-cscope} is a derivative of @name{cscope} to use @name{GLOBAL}
	as the back-end.
	Its line-oriented interface was originally written in 2006, and was
	re-implemented in 2011 using @name{cscope} itself.
